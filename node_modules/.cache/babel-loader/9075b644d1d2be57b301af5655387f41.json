{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\n/**\r\n *  useOutsideClick hook\r\n *\r\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\r\n *\r\n * @param ref Ref whose outside click needs to be listened to\r\n * @param handler Callback to fire on outside click\r\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\r\n */\n\nfunction useOutsideClick(ref, handler) {\n  var when = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var savedHandler = useRef(handler);\n  var memoizedCallback = useCallback(function (e) {\n    if (ref && ref.current && !ref.current.contains(e.target)) {\n      savedHandler.current(e);\n    }\n  }, []);\n  useEffect(function () {\n    savedHandler.current = handler;\n  });\n  useEffect(function () {\n    if (when) {\n      document.addEventListener(\"click\", memoizedCallback);\n      document.addEventListener(\"ontouchstart\", memoizedCallback);\n      return function () {\n        document.removeEventListener(\"click\", memoizedCallback);\n        document.removeEventListener(\"ontouchstart\", memoizedCallback);\n      };\n    }\n  }, [ref, handler, when]);\n}\n\nexport default useOutsideClick;","map":{"version":3,"mappings":"","names":[],"sources":[],"sourcesContent":["import { useRef, useCallback, useEffect } from 'react';\n\n/**\r\n *  useOutsideClick hook\r\n *\r\n * Checks if a click happened outside a Ref. Handy for dropdowns, modals and popups etc.\r\n *\r\n * @param ref Ref whose outside click needs to be listened to\r\n * @param handler Callback to fire on outside click\r\n * @param when A boolean which which activates the hook only when it is true. Useful for conditionally enable the outside click\r\n */\r\nfunction useOutsideClick(ref, handler, when = true) {\r\n    const savedHandler = useRef(handler);\r\n    const memoizedCallback = useCallback((e) => {\r\n        if (ref && ref.current && !ref.current.contains(e.target)) {\r\n            savedHandler.current(e);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        savedHandler.current = handler;\r\n    });\r\n    useEffect(() => {\r\n        if (when) {\r\n            document.addEventListener(\"click\", memoizedCallback);\r\n            document.addEventListener(\"ontouchstart\", memoizedCallback);\r\n            return () => {\r\n                document.removeEventListener(\"click\", memoizedCallback);\r\n                document.removeEventListener(\"ontouchstart\", memoizedCallback);\r\n            };\r\n        }\r\n    }, [ref, handler, when]);\r\n}\n\nexport default useOutsideClick;\n//# sourceMappingURL=index.esm.js.map\n"]},"metadata":{},"sourceType":"module"}